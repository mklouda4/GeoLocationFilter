name: Build and Push Docker Image and Create Release

on:
  push:
    branches: 
      - main
      - master
    tags: 
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Potřebné pro správné tagy
      
      - name: List files (debug)
        run: |
          echo "Current directory:"
          pwd
          echo "Files in root:"
          ls -la
          echo "Files in GeoLocationFilter:"
          ls -la GeoLocationFilter/ || echo "GeoLocationFilter directory not found"
          echo "Checking for Dockerfile:"
          ls -la GeoLocationFilter/Dockerfile || echo "Dockerfile not found"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}},enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .  # Context je adresář s Dockerfile
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64  # Multi-platform build
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            BUILD_CONFIGURATION=Release

      - name: Generate SBOM
        if: startsWith(github.ref, 'refs/tags/')
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "GeoGuard API ${{ github.ref_name }}"
          generate_release_notes: true
          files: |
            sbom.spdx.json
            docker-compose.yml
          body: |
            ## 🐳 Docker Image
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ## 🚀 Quick Start
            
            ```bash
            # Using docker-compose
            curl -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/docker-compose.yml
            echo "MAXMIND_LICENSE_KEY=your_key" > .env
            docker compose up -d
            
            # Using docker run
            docker run -d \
              --name geoguard \
              -p 127.0.0.1:8080:8080 \
              -e ALLOWED_COUNTRIES=CZ,SK,DE \
              -e BLOCKED_COUNTRIES=CN,RU \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ## 📊 Available Tags
            
            - `latest` - Latest stable release
            - `${{ github.ref_name }}` - This specific version
            - Multi-arch support: `linux/amd64`, `linux/arm64`
            
            ## 🔧 Configuration
            
            See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for full configuration options.
      
      - name: Update Docker Hub Description
        if: startsWith(github.ref, 'refs/tags/')
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ github.repository }}
          short-description: "Traefik middleware for geo-filtering requests"
          readme-filepath: ./README.md
      
      - name: Security scan
        if: startsWith(github.ref, 'refs/tags/')
        uses: anchore/scan-action@v3
        continue-on-error: true
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          fail-build: false
          severity-cutoff: high
      
      - name: Post-build summary
        run: |
          echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Tags | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | \`linux/amd64,linux/arm64\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Digest | \`${{ steps.build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "| Release | [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}) |" >> $GITHUB_STEP_SUMMARY
          fi